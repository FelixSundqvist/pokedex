{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/PokedexInfo/Types/Types.js","components/PokedexInfo/DexEntry/DexEntry.js","components/PokedexInfo/InfoImage/InfoImage.js","components/PokedexInfo/FormButton/FormButton.js","components/PokedexInfo/Stats/Stats.js","components/PokedexInfo/EvolutionChain/EvolutionChain.js","components/PokedexInfo/PokedexInfo.js","containers/CurrentPokemon/CurrentPokemon.js"],"names":["_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","Types","_ref","type","StyledTypes","styled","span","_templateObject","bgColor","react_default","a","createElement","style","backgroundColor","StyledDexEntry","div","DexEntry_templateObject","DexEntry","props","children","InfoImage","StyledImage","InfoImage_templateObject","concat","imageLink","name","withTheme","FormButton","button","FormButton_templateObject","theme","palette","secondary","onClick","Stats","checkColor","str","stats","map","current","id","key","color","stat","base_stat","EvolutionChain","evoChain","chain","babyItems","baby_trigger_item","EvolutionWrapper","EvolutionChain_templateObject","evolutionBranch","checkEvolution","evolution","newArr","newItem","Object","toConsumableArray","createArr","arguments","evolves_to","apply","cur","Card","species","getIDFromURL","url","PokedexInfo","React","memo","selectedPokemon","pokedexInfo","evolutionClick","_useState2","useState","changeImageLink","flavor_text_entries","varieties","habitat","height","moves","weight","abilities","StyledInfo","PokedexInfo_templateObject","pokemonProperties","pokemonGenus","types","size","formes","description","evolutionChain","filter","language","pokemonGenera","genera","PokedexInfo_Types_Types","checkLetter","genus","form","PokedexInfo_FormButton_FormButton","pokemon","Fragment","PokedexInfo_DexEntry_DexEntry","ability","flavor_text","roundNum","PokedexInfo_EvolutionChain_EvolutionChain","PokedexInfo_Stats_Stats","allPkmnProperties","keys","PokedexInfo_InfoImage_InfoImage","Button","CurrentPokemon","isLoadingCurrent","match","history","fetchSelectedPokemon","fetchEvoChain","useEffect","params","evolution_chain","GB","CurrentPokemon_templateObject","Loading","PokedexInfo_PokedexInfo","Wrapper","GBScreen","connect","state","selectedPokemonId","dispatch","actionTypes","evoChainURL"],"mappings":"kJAGe,SAAAA,EAAAC,EAAAC,GACf,OCJe,SAAAD,GACf,GAAAE,MAAAC,QAAAH,GAAA,OAAAA,EDGSI,CAAcJ,IEJR,SAAAA,EAAAC,GACf,IAAAI,EAAA,GACAC,GAAA,EACAC,GAAA,EACAC,OAAAC,EAEA,IACA,QAAAC,EAAAC,EAAAX,EAAAY,OAAAC,cAA6CP,GAAAI,EAAAC,EAAAG,QAAAC,QAC7CV,EAAAW,KAAAN,EAAAO,QAEAhB,GAAAI,EAAAa,SAAAjB,GAH4EK,GAAA,IAKzE,MAAAa,GACHZ,GAAA,EACAC,EAAAW,EACG,QACH,IACAb,GAAA,MAAAK,EAAA,QAAAA,EAAA,SACK,QACL,GAAAJ,EAAA,MAAAC,GAIA,OAAAH,EFnBgCe,CAAoBpB,EAAAC,IGJrC,WACf,UAAAoB,UAAA,wDHGgEC,oUIDhE,IA0EeC,EA1ED,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACPC,EAAcC,IAAOC,KAAVC,KAWbC,EAAU,UACd,OAAOL,GACH,IAAK,MACDK,EAAU,UACd,MACA,IAAK,OACDA,EAAU,UACd,MACA,IAAK,SACDA,EAAU,UACd,MACA,IAAK,WACDA,EAAU,UACd,MACA,IAAK,QACDA,EAAU,UACd,MACA,IAAK,WACDA,EAAS,UACb,MACA,IAAK,OACDA,EAAU,UACd,MACA,IAAK,SACDA,EAAU,UACd,MACA,IAAK,QACDA,EAAU,UACd,MACA,IAAK,QACDA,EAAU,UACd,MACA,IAAK,SACDA,EAAU,UACd,MACA,IAAK,MACDA,EAAU,UACd,MACA,IAAK,SACDA,EAAU,UACd,MACA,IAAK,SACDA,EAAU,UACd,MACA,IAAK,UACDA,EAAU,UACd,MACA,IAAK,OACDA,EAAU,UACd,MACA,IAAK,QACDA,EAAU,UACd,MACA,IAAK,QACDA,EAAU,UACd,MACA,QACIA,EAAU,QAElB,OAAOC,EAAAC,EAAAC,cAACP,EAAD,CAAaQ,MAAO,CAACC,gBAAiBL,IAAWL,sKCvE5D,IAAMW,EAAiBT,IAAOU,IAAVC,KASLC,EAFE,SAAAC,GAAK,OAAIT,EAAAC,EAAAC,cAACG,EAAD,KAAiBI,EAAMC,+PCPjD,IAYeC,EAZG,SAAAF,GACd,IAAMG,EAAchB,IAAOU,IAAVO,IAAA,OAAAC,OAEcL,EAAMM,UAFpB,MAQjB,OAAOf,EAAAC,EAAAC,cAACU,EAAD,CAAaI,KAAMP,EAAMM,wRCTpC,IAceE,cAdI,SAAAR,GAEf,IAAMS,EAAatB,IAAOuB,OAAVC,IAGQX,EAAMY,MAAMC,QAAQC,WAM5C,OAAOvB,EAAAC,EAAAC,cAACgB,EAAD,CAAYM,QAASf,EAAMe,SAAUf,EAAMC,YCyBvCe,EArCD,SAAAhB,GACV,IAAMiB,EAAa,SAACC,GAChB,OAAOA,GACH,IAAM,KACF,MAAO,UACX,IAAM,SACF,MAAO,UACX,IAAM,UACF,MAAO,UACX,IAAK,iBACD,MAAO,UACX,IAAK,kBACD,MAAO,UACX,IAAK,QACD,MAAO,UACX,QACI,MAAO,UAGbC,EAAQnB,EAAMmB,MAAMC,IAAI,SAACC,EAASC,GAEpC,OACA/B,EAAAC,EAAAC,cAAA,OAAK8B,IAAK,OAASD,GACf/B,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAC8B,MAAOP,EAAWI,EAAQI,KAAKlB,QAASc,EAAQI,KAAKlB,MAChEhB,EAAAC,EAAAC,cAAA,SAAK4B,EAAQK,cAKrB,OACInC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wBACC0B,gPC9Bb,IA6CeQ,EA7CQ,SAAA3B,GAAS,IACpB4B,EAAa5B,EAAb4B,SACR,IAAIA,EAASC,MACT,OAAO,KAGX,IAAMC,EAAYF,EAASG,kBAAoBxC,EAAAC,EAAAC,cAAA,SAAImC,EAASG,mBAAyB,KAC/EC,EAAmB7C,IAAOU,IAAVoC,KAoBhBC,EATiB,SAAjBC,EAAkBC,GAAsB,IACtCC,EALU,SAAC7E,EAAK8E,GACpB,SAAAjC,OAAAkC,OAAAC,EAAA,EAAAD,CAAW/E,GAAX,CAAgB8E,IAIHG,CAD6BC,UAAAhE,OAAA,QAAAT,IAAAyE,UAAA,GAAAA,UAAA,GAAP,GACPN,GAC5B,GAAGA,EAAUO,YAAcP,EAAUO,WAAWjE,QAAU,EACtD,IAAI,IAAIjB,EAAI,EAAEA,EAAI2E,EAAUO,WAAWjE,OAAQjB,IAC3C4E,EAAO7D,KAAPoE,MAAAP,EAAME,OAAAC,EAAA,EAAAD,CAASJ,EAAeC,EAAUO,WAAWlF,MAG3D,OAAO4E,EAEaF,CAAeP,EAASC,OAAOT,IAAI,SAAAyB,GAAG,OACtDtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CACI/B,QAASf,EAAMe,QACfQ,IAAKsB,EAAIE,QAAQxC,KACjBe,GAAI0B,YAAaH,EAAIE,QAAQE,KAC7B1C,KAAMsC,EAAIE,QAAQxC,SAK9B,OACAhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6BACCqC,EACDvC,EAAAC,EAAAC,cAACuC,EAAD,KAAmBE,6LCjC3B,IAAMgB,EAAcC,IAAMC,KAAK,SAAApE,GAAqE,IAAnEqE,EAAmErE,EAAnEqE,gBAAiBC,EAAkDtE,EAAlDsE,YAAoB1B,GAA8B5C,EAArC4B,MAAqC5B,EAA9B4C,UAAU2B,EAAoBvE,EAApBuE,eAAoBC,EAAAjG,EAG1FkG,mBAAQ,qCAAApD,OAAsCgD,EAAgB9C,KAAtD,SAHkF,GAEzFD,EAFyFkD,EAAA,GAE9EE,EAF8EF,EAAA,GAKxFG,EAA4CL,EAA5CK,oBAAqBC,EAAuBN,EAAvBM,UAAWC,EAAYP,EAAZO,QACzBC,GAAqCT,EAA5CU,MAA4CV,EAArCS,QAAQE,EAA6BX,EAA7BW,OAAQC,EAAqBZ,EAArBY,UAAW9C,EAAUkC,EAAVlC,MAGpC+C,EAAa/E,IAAOU,IAAVsE,KAOVC,EAAoB,CACtBC,aAAc,KACdC,MAAO,KACPC,KAAM,KACNV,QAAS,KACTW,OAAQ,KACRP,UAAW,KACXQ,YAAa,KACbV,MAAO,KACP5C,MAAO,KACPuD,eAAgB,MAGdD,EAAcd,EAClBA,EAAoBgB,OAAO,SAAA9B,GAAG,MAA0B,OAAtBA,EAAI+B,SAASrE,OAAe,GAAK,KAE/DsE,EAAgBvB,EAAYwB,OAChCxB,EAAYwB,OAAOH,OAAO,SAAA9B,GAAG,MAA0B,OAAtBA,EAAI+B,SAASrE,OAAe,GAAK,KAEpE6D,EAAkBE,MAAQjB,EAAgBiB,MACxC/E,EAAAC,EAAAC,cAAA,OAAK8B,IAAI,SAAS8B,EAAgBiB,MAAMlD,IAAI,SAAAyB,GAAG,OAAItD,EAAAC,EAAAC,cAACsF,EAAD,CAAOxD,IAAKsB,EAAI5D,KAAKsB,KAAMtB,KAAM4D,EAAI5D,KAAKsB,UAC7F,KAEF6D,EAAkBC,aAAeQ,EAC/BtF,EAAAC,EAAAC,cAAA,MAAI8B,IAAI,SAASyD,YAAYH,EAAcI,QAC3C,KAEFb,EAAkBI,OAASZ,GAAaA,EAAUlF,OAAS,EAEvDa,EAAAC,EAAAC,cAAA,OAAK8B,IAAI,SACLhC,EAAAC,EAAAC,cAAA,oBACEmE,EAAUxC,IAAI,SAAA8D,GAAI,OAChB3F,EAAAC,EAAAC,cAAC0F,EAAD,CACI5D,IAAK2D,EAAKE,QAAQ7E,KAClBQ,QAAS,kBAAM2C,EA3Cf,qCA2CuCwB,EAAKE,QAAQ7E,KAAK,UACpD2E,EAAKE,QAAQ7E,SAG/B,KAEH6D,EAAkBH,UAAYA,EAE1B1E,EAAAC,EAAAC,cAACF,EAAAC,EAAM6F,SAAP,CAAgB9D,IAAI,aAChBhC,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAC6F,EAAD,KACKrB,EAAU7C,IAAI,SAAAyB,GAAG,OAAItD,EAAAC,EAAAC,cAAA,QAAM8B,IAAKsB,EAAI0C,QAAQhF,MAAOsC,EAAI0C,QAAQhF,KAA1C,IAAgDhB,EAAAC,EAAAC,cAAA,gBAGhF,KAEF2E,EAAkBK,YAAcA,EAE5BlF,EAAAC,EAAAC,cAACF,EAAAC,EAAM6F,SAAP,CAAgB9D,IAAI,eAChBhC,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAC6F,EAAD,KACI/F,EAAAC,EAAAC,cAAA,SAAIgF,EAAYe,eAGxBjG,EAAAC,EAAAC,cAAA,OAAK8B,IAAI,WAAT,WAEJ6C,EAAkBG,KAAOT,GAAUE,EAE/BzE,EAAAC,EAAAC,cAAA,KAAG8B,IAAI,QAAP,WAAAlB,OACgBoF,YAAS3B,EAAQ,IADjC,MAEIvE,EAAAC,EAAAC,cAAA,WAFJ,WAAAY,OAGgBoF,YAASzB,EAAQ,IAHjC,QAKF,KAEFI,EAAkBM,eAAiB9C,EACjCrC,EAAAC,EAAAC,cAACiG,EAAD,CAAgB3E,QAASwC,EAAgBhC,IAAI,YAAYK,SAAUA,IACnE,KAEFwC,EAAkBP,QAAUA,EAAStE,EAAAC,EAAAC,cAAA,KAAG8B,IAAI,WAAYsC,EAAQtD,MAAa,KAC7E6D,EAAkBjD,MAAQA,EAAQ5B,EAAAC,EAAAC,cAACkG,EAAD,CAAOpE,IAAI,QAAQJ,MAAOA,IAAY,KACxE,IAAMyE,EAAoBrD,OAAOsD,KAAKzB,GAAmBhD,IAAI,SAAAyB,GAAG,OAAIuB,EAAkBvB,KAEtF,OACItD,EAAAC,EAAAC,cAACyE,EAAD,KACI3E,EAAAC,EAAAC,cAACqG,EAAD,CAAWxF,UAAWA,IACtBf,EAAAC,EAAAC,cAAA,UAAK4D,EAAgB9C,MACpBqF,EAEDrG,EAAAC,EAAAC,cAACsG,EAAA,EAAD,uBAKGvF,cAAU0C,kJCzGzB,IAAM8C,EAAiB7C,IAAMC,KAAK,SAAApE,GAWxBA,EATF4B,MASE,IARFyC,EAQErE,EARFqE,gBACAC,EAOEtE,EAPFsE,YACA2C,EAMEjH,EANFiH,iBACAC,EAKElH,EALFkH,MACAC,EAIEnH,EAJFmH,QACAC,EAGEpH,EAHFoH,qBACAC,EAEErH,EAFFqH,cACAzE,EACE5C,EADF4C,SAEJ0E,oBAAU,WACNF,EAAqBF,EAAMK,OAAOjF,KACpC,CAAC8E,EAAsBF,IAEzBI,oBAAU,WACHhD,EAAYkD,iBAAmBlD,GAC9B+C,EAAc/C,EAAYkD,gBAAgBvD,MAE/C,CAACK,EAAa+C,IAEjB,IAAMI,EAAKtH,IAAOU,IAAV6G,KAIFtB,EAAWa,EAMP1G,EAAAC,EAAAC,cAACkH,EAAA,EAAD,MALVpH,EAAAC,EAAAC,cAACmH,EAAD,CACItD,YAAaA,EACbD,gBAAiBA,EACjBzB,SAAUA,EACV2B,eAAgB,SAACjC,GAAD,OAAQ6E,EAAQ3H,KAAK,OAAO8C,MAGhD,OACI/B,EAAAC,EAAAC,cAACoH,EAAA,EAAD,KACItH,EAAAC,EAAAC,cAACgH,EAAD,KACIlH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,KACM1B,OAoBP2B,sBAbS,SAACC,GAAD,MAAY,CAChCC,kBAAmBD,EAAMC,kBACzB5D,gBAAiB2D,EAAM3D,gBACvBC,YAAa0D,EAAM1D,YACnB2C,iBAAkBe,EAAMf,iBACxBrE,SAAUoF,EAAMtC,iBAGO,SAACwC,GAAD,MAAe,CACtCd,qBAAsB,SAAC9E,GAAD,OAAQ4F,EAAS,CAACjI,KAAMkI,IAAsC7F,GAAIA,KACxF+E,cAAe,SAACpD,GAAD,OAASiE,EAAS,CAACjI,KAAMkI,IAAmCC,YAAanE,OAG7E8D,CAA6CvG,YAAUwF","file":"static/js/3.c5cbf484.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Types = ({ type }) => {\r\n    const StyledTypes = styled.span`\r\n        padding: 8px;\r\n        border: 2px solid black;\r\n        border-radius: 1vw;\r\n        width: 25px;\r\n        height: 10px;\r\n        margin: 8px;\r\n        color: white;\r\n        text-transform: uppercase;\r\n        font-family: sans-serif;\r\n    `\r\n    let bgColor = \"#BFBCB6\";\r\n    switch(type){\r\n        case(\"bug\"): \r\n            bgColor = \"#9EAC24\";\r\n        break;\r\n        case(\"dark\"):\r\n            bgColor = \"#2A241F\";\r\n        break;\r\n        case(\"dragon\"):\r\n            bgColor = \"#6C5CBA\";\r\n        break;  \r\n        case(\"electric\"):\r\n            bgColor = \"#E19E1E\";\r\n        break;\r\n        case(\"fairy\"):\r\n            bgColor = \"#EDA7EF\";\r\n        break;\r\n        case(\"fighting\"):\r\n            bgColor =\"#603228\";\r\n        break;\r\n        case(\"fire\"):\r\n            bgColor = \"#CE340C\";\r\n        break;\r\n        case(\"flying\"):\r\n            bgColor = \"#6879CF\";\r\n        break;\r\n        case(\"ghost\"):\r\n            bgColor = \"#444364\";\r\n        break;\r\n        case(\"grass\"):\r\n            bgColor = \"#467127\";\r\n        break;\r\n        case(\"ground\"):\r\n            bgColor = \"#937D52\";\r\n        break;\r\n        case(\"ice\"):\r\n            bgColor = \"#72D6EF\";\r\n        break;\r\n        case(\"normal\"):\r\n            bgColor = \"#BFBCB6\";\r\n        break;\r\n        case(\"poison\"):\r\n            bgColor = \"#884D88\";\r\n        break;\r\n        case(\"psychic\"):\r\n            bgColor = \"#D84C7B\";\r\n        break;\r\n        case(\"rock\"):\r\n            bgColor = \"#998444\";\r\n        break;\r\n        case(\"steel\"):\r\n            bgColor = \"#827F8C\";\r\n        break;\r\n        case(\"water\"):\r\n            bgColor = \"#3C8FDC\";\r\n        break;\r\n        default:\r\n            bgColor = \"white\";\r\n    }\r\n    return(<StyledTypes style={{backgroundColor: bgColor}}>{type}</StyledTypes>)\r\n}\r\n\r\nexport default Types;","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst StyledDexEntry = styled.div`\r\npadding: 16px;\r\nbackground-color: white;\r\ncolor: black;\r\n\r\nfont-family: sans-serif;`\r\n\r\nconst DexEntry = props => <StyledDexEntry>{props.children}</StyledDexEntry>\r\n\r\nexport default DexEntry;","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst InfoImage = props => {\r\n    const StyledImage = styled.div`\r\n        height: 100px;\r\n        background-image: ${`url(${props.imageLink})`};\r\n        background-repeat: no-repeat;\r\n        background-size: contain;\r\n        background-position: 50% 50%;\r\n    `\r\n\r\n    return <StyledImage name={props.imageLink} />\r\n}\r\n\r\nexport default InfoImage;","import React from 'react';\r\nimport styled, { withTheme } from 'styled-components';\r\n\r\nconst FormButton = props => {\r\n    \r\n    const FormButton = styled.button`\r\n        margin: 16px;\r\n        padding: 16px;\r\n        background-color: ${props.theme.palette.secondary};\r\n        border-radius: 16px;\r\n        color: white;\r\n        border: none;\r\n        text-transform: capitalize;\r\n    `\r\n    return <FormButton onClick={props.onClick}>{props.children}</FormButton>\r\n}\r\n\r\nexport default withTheme(FormButton)","import React from 'react';\r\n\r\nconst Stats = props => {\r\n    const checkColor = (str) => {\r\n        switch(str){\r\n            case (\"hp\"):\r\n                return '#FF5959'\r\n            case (\"attack\"):\r\n                return '#F5AC78'\r\n            case (\"defense\"):\r\n                return '#FAE078'\r\n            case(\"special-attack\"):\r\n                return '#9DB7F5'\r\n            case(\"special-defense\"):\r\n                return '#A7DB8D'\r\n            case(\"speed\"):\r\n                return '#FA92B2'\r\n            default: \r\n                return 'white'\r\n        }\r\n    }\r\n    const stats = props.stats.map((current, id) => {\r\n\r\n        return( \r\n        <div key={\"stat\" + id}>\r\n            <p style={{color: checkColor(current.stat.name)}}>{current.stat.name}</p>\r\n            <p>{ current.base_stat }</p>\r\n        </div>)\r\n        }\r\n    )\r\n\r\n    return(\r\n        <div>\r\n            <h3>Base Stats</h3>\r\n            {stats}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stats;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Card from '../../CardList/Card/Card';\r\nimport { getIDFromURL } from '../../../utility';\r\nconst EvolutionChain = props => {\r\n    const { evoChain } = props;\r\n    if(!evoChain.chain) {\r\n        return null\r\n    }\r\n\r\n    const babyItems = evoChain.baby_trigger_item ? <p>{evoChain.baby_trigger_item}</p> : null;\r\n    const EvolutionWrapper = styled.div`\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        justify-content: center;\r\n        align-items: center;\r\n        color: black;\r\n    `\r\n    const createArr = (arr, newItem) => {\r\n        return [...arr, newItem]\r\n\r\n    }\r\n    const checkEvolution = (evolution, arr=[]) => {\r\n        let newArr = createArr(arr, evolution)\r\n        if(evolution.evolves_to && evolution.evolves_to.length >= 1){\r\n            for(let i = 0;i < evolution.evolves_to.length; i++){\r\n                newArr.push(...checkEvolution(evolution.evolves_to[i]))\r\n            }\r\n        }\r\n        return newArr\r\n    }\r\n    const evolutionBranch = checkEvolution(evoChain.chain).map(cur => \r\n            <Card\r\n                onClick={props.onClick}\r\n                key={cur.species.name} \r\n                id={getIDFromURL(cur.species.url)}\r\n                name={cur.species.name}\r\n                 />)\r\n\r\n\r\n    \r\n    return (\r\n    <div>\r\n        <h4>Evolution Chain</h4>\r\n        {babyItems}\r\n        <EvolutionWrapper>{evolutionBranch}</EvolutionWrapper>\r\n    </div>)\r\n}\r\n\r\nexport default EvolutionChain;","import React, { useState } from 'react';\r\nimport styled, { withTheme } from 'styled-components';\r\n\r\nimport Types from './Types/Types';\r\nimport Button from '../UI/Button/Button';\r\nimport DexEntry from './DexEntry/DexEntry';\r\nimport InfoImage from './InfoImage/InfoImage';\r\nimport FormButton from './FormButton/FormButton';\r\nimport Stats from './Stats/Stats';\r\nimport EvolutionChain from './EvolutionChain/EvolutionChain';\r\nimport { roundNum, checkLetter } from '../../utility';\r\n\r\nconst PokedexInfo = React.memo(({selectedPokemon, pokedexInfo, theme, evoChain, evolutionClick}) => {\r\n\r\n    const [imageLink, changeImageLink] \r\n        = useState(`http://felixsundqvist.org/pokemon/${selectedPokemon.name}.gif`)\r\n    \r\n    const { flavor_text_entries, varieties, habitat } = pokedexInfo;\r\n    const { moves, height, weight, abilities, stats } = selectedPokemon;\r\n    const linkURL = \"http://felixsundqvist.org/pokemon/\";\r\n\r\n    const StyledInfo = styled.div`\r\n        min-height: 100%;\r\n        width: 100%;\r\n        color: white;\r\n        text-transform: capitalize;\r\n    `\r\n\r\n    const pokemonProperties = {\r\n        pokemonGenus: null,\r\n        types: null,\r\n        size: null,\r\n        habitat: null,\r\n        formes: null,\r\n        abilities: null,\r\n        description: null,\r\n        moves: null,\r\n        stats: null,\r\n        evolutionChain: null\r\n    }\r\n\r\n    const description = flavor_text_entries \r\n    ? flavor_text_entries.filter(cur => cur.language.name === \"en\")[0] : null;\r\n\r\n    const pokemonGenera = pokedexInfo.genera \r\n    ? pokedexInfo.genera.filter(cur => cur.language.name === \"en\")[0] : null;\r\n\r\n    pokemonProperties.types = selectedPokemon.types \r\n    ? <div key=\"types\">{selectedPokemon.types.map(cur => <Types key={cur.type.name} type={cur.type.name} />)}</div> \r\n    : null;\r\n\r\n    pokemonProperties.pokemonGenus = pokemonGenera \r\n    ? <h3 key=\"genus\">{checkLetter(pokemonGenera.genus)}</h3> \r\n    : null;\r\n\r\n    pokemonProperties.formes = varieties && varieties.length > 1 \r\n    ? \r\n        <div key=\"forms\"> \r\n            <h3>Formes</h3>\r\n            { varieties.map(form => \r\n                <FormButton \r\n                    key={form.pokemon.name}\r\n                    onClick={() => changeImageLink(linkURL+form.pokemon.name+\".gif\")}>\r\n                        {form.pokemon.name}\r\n                </FormButton>)}\r\n        </div>\r\n    :  null \r\n   \r\n    pokemonProperties.abilities = abilities \r\n    ? \r\n        <React.Fragment key=\"abilities\">\r\n            <h5>Abilities</h5>\r\n            <DexEntry>\r\n                {abilities.map(cur => <span key={cur.ability.name}>{cur.ability.name} <br /></span>)} \r\n            </DexEntry>\r\n        </React.Fragment> \r\n    : null;\r\n    \r\n    pokemonProperties.description = description \r\n    ?   \r\n        <React.Fragment key=\"description\">\r\n            <h5>Dex Entry</h5>\r\n            <DexEntry>\r\n                <p>{description.flavor_text}</p>\r\n            </DexEntry>\r\n        </React.Fragment>    \r\n    :   <div key=\"loading\">LOADING</div>;\r\n\r\n    pokemonProperties.size = height && weight\r\n    ? \r\n        <p key=\"size\">\r\n            {`Height: ${roundNum(height, 0.1)} m`} \r\n            <br />\r\n            {`Weight: ${roundNum(weight, 0.1)} kg`}\r\n        </p>\r\n    : null;\r\n\r\n    pokemonProperties.evolutionChain = evoChain \r\n    ? <EvolutionChain onClick={evolutionClick} key=\"evo chain\" evoChain={evoChain}/> \r\n    : null;\r\n\r\n    pokemonProperties.habitat = habitat ?<p key=\"habitat\">{ habitat.name }</p> : null;\r\n    pokemonProperties.stats = stats ? <Stats key=\"stats\" stats={stats} /> : null;\r\n    const allPkmnProperties = Object.keys(pokemonProperties).map(cur => pokemonProperties[cur]);\r\n    \r\n    return(\r\n        <StyledInfo>\r\n            <InfoImage imageLink={imageLink} />\r\n            <h2>{selectedPokemon.name}</h2>\r\n            {allPkmnProperties}\r\n            \r\n            <Button>Add To Team</Button>\r\n        </StyledInfo>\r\n    )\r\n})\r\n\r\nexport default withTheme(PokedexInfo);","import React, { useEffect } from 'react';\r\nimport styled, { withTheme } from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n/* import GBController from '../../components/Body/GBController/GBController'; */\r\nimport GBScreen from '../../components/GBScreen/GBScreen';\r\nimport PokedexInfo from '../../components/PokedexInfo/PokedexInfo';\r\nimport Loading from '../../components/Loading/Loading';\r\n\r\nimport * as actionTypes from '../../store/actions/actionTypes';\r\nimport Wrapper from '../../components/Wrapper/Wrapper';\r\n\r\nconst CurrentPokemon = React.memo((\r\n    {\r\n        theme,\r\n        selectedPokemon, \r\n        pokedexInfo,\r\n        isLoadingCurrent,\r\n        match,\r\n        history,\r\n        fetchSelectedPokemon,\r\n        fetchEvoChain,\r\n        evoChain\r\n    }) => {\r\n    useEffect(() => { \r\n        fetchSelectedPokemon(match.params.id);\r\n    },[fetchSelectedPokemon, match])\r\n\r\n    useEffect(() => {\r\n        if(pokedexInfo.evolution_chain && pokedexInfo){\r\n            fetchEvoChain(pokedexInfo.evolution_chain.url)\r\n        }\r\n    }, [pokedexInfo, fetchEvoChain])\r\n\r\n    const GB = styled.div`\r\n        height: 100%;\r\n        width: 100%;\r\n    `\r\n    const pokemon = !isLoadingCurrent ?                 \r\n    <PokedexInfo \r\n        pokedexInfo={pokedexInfo} \r\n        selectedPokemon={selectedPokemon}\r\n        evoChain={evoChain}\r\n        evolutionClick={(id) => history.push(\"/id=\"+id)}\r\n         /> : <Loading />\r\n\r\n    return (\r\n        <Wrapper>\r\n            <GB>\r\n                <GBScreen>\r\n                    { pokemon } \r\n                </GBScreen>\r\n            </GB>\r\n        </Wrapper>\r\n    )\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedPokemonId: state.selectedPokemonId,\r\n    selectedPokemon: state.selectedPokemon,\r\n    pokedexInfo: state.pokedexInfo,\r\n    isLoadingCurrent: state.isLoadingCurrent,\r\n    evoChain: state.evolutionChain\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchSelectedPokemon: (id) => dispatch({type: actionTypes.FETCH_CURRENT_PKMN_START, id: id}),\r\n    fetchEvoChain: (url) => dispatch({type: actionTypes.FETCH_EVO_CHAIN_START, evoChainURL: url})\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withTheme(CurrentPokemon));"],"sourceRoot":""}