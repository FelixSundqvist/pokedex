{"version":3,"sources":["components/PokedexInfo/Types/Types.js","components/PokedexInfo/PokedexInfo.js","containers/CurrentPokemon/CurrentPokemon.js"],"names":["Types","_ref","type","StyledTypes","styled","span","_templateObject","bgColor","react_default","a","createElement","style","backgroundColor","PokedexInfo","React","memo","selectedPokemon","flavor_text_entries","pokedexInfo","description","filter","cur","language","name","StyledInfo","div","PokedexInfo_templateObject","Image","_templateObject2","concat","DexEntry","_templateObject3","types","map","PokedexInfo_Types_Types","key","abilities","Fragment","ability","dexEntryText","flavor_text","CurrentPokemon","theme","isLoadingCurrent","match","fetchSelectedPokemon","useEffect","params","id","StyledFold","CurrentPokemon_templateObject","palette","primary","black","ScreenWrapper","CurrentPokemon_templateObject2","pokemon","Loading","PokedexInfo_PokedexInfo","GBScreen","connect","state","selectedPokemonId","dispatch","actionTypes","withTheme"],"mappings":"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","file":"static/js/3.9de514d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Types = ({ type }) => {\r\n    const StyledTypes = styled.span`\r\n        padding: 8px;\r\n        border: 2px solid black;\r\n        border-radius: 1vw;\r\n        width: 25px;\r\n        height: 10px;\r\n        margin: 8px;\r\n        color: white;\r\n        text-transform: uppercase;\r\n        font-family: sans-serif;\r\n    `\r\n    let bgColor = \"#BFBCB6\";\r\n    switch(type){\r\n        case(\"bug\"): \r\n            bgColor = \"#9EAC24\";\r\n        break;\r\n        case(\"dark\"):\r\n            bgColor = \"#2A241F\";\r\n        break;\r\n        case(\"dragon\"):\r\n            bgColor = \"#6C5CBA\";\r\n        break;  \r\n        case(\"electric\"):\r\n            bgColor = \"#E19E1E\";\r\n        break;\r\n        case(\"fairy\"):\r\n            bgColor = \"#EDA7EF\";\r\n        break;\r\n        case(\"fighting\"):\r\n            bgColor =\"#603228\";\r\n        break;\r\n        case(\"fire\"):\r\n            bgColor = \"#CE340C\";\r\n        break;\r\n        case(\"flying\"):\r\n            bgColor = \"#6879CF\";\r\n        break;\r\n        case(\"ghost\"):\r\n            bgColor = \"#444364\";\r\n        break;\r\n        case(\"grass\"):\r\n            bgColor = \"#467127\";\r\n        break;\r\n        case(\"ground\"):\r\n            bgColor = \"#937D52\";\r\n        break;\r\n        case(\"ice\"):\r\n            bgColor = \"#72D6EF\";\r\n        break;\r\n        case(\"normal\"):\r\n            bgColor = \"#BFBCB6\";\r\n        break;\r\n        case(\"poison\"):\r\n            bgColor = \"#884D88\";\r\n        break;\r\n        case(\"psychic\"):\r\n            bgColor = \"#D84C7B\";\r\n        break;\r\n        case(\"rock\"):\r\n            bgColor = \"#998444\";\r\n        break;\r\n        case(\"steel\"):\r\n            bgColor = \"#827F8C\";\r\n        break;\r\n        case(\"water\"):\r\n            bgColor = \"#3C8FDC\";\r\n        break;\r\n        default:\r\n            bgColor = \"white\";\r\n    }\r\n    return(<StyledTypes style={{backgroundColor: bgColor}}>{type}</StyledTypes>)\r\n}\r\n\r\nexport default Types;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Types from './Types/Types';\r\n\r\nconst PokedexInfo = React.memo(({selectedPokemon, pokedexInfo}) => {\r\n    const { flavor_text_entries } = pokedexInfo;\r\n    const description = flavor_text_entries ? flavor_text_entries.filter(cur => cur.language.name === \"en\" ? true : false) : null;\r\n   \r\n    const StyledInfo = styled.div`\r\n        min-height: 100%;\r\n        width: 100%;\r\n        color: white;\r\n        text-transform: capitalize;\r\n    `\r\n    const Image = styled.div`\r\n    height: 100px;\r\n    background-image: ${`url(http://felixsundqvist.org/pokemon/${selectedPokemon.name}.gif)`};\r\n    background-repeat: no-repeat;\r\n    background-size: contain;\r\n    background-position: 50% 50%;\r\n    `\r\n    const DexEntry = styled.div`\r\n        padding: 16px;\r\n        background-color: white;\r\n        color: black;\r\n        text-align: left;\r\n        margin: 16px;\r\n        font-family: sans-serif;\r\n`\r\n    const types = selectedPokemon.types \r\n        ? selectedPokemon.types.map(cur => <Types key={cur.type.name} type={cur.type.name} />) \r\n        : null;\r\n\r\n    const abilities =  selectedPokemon.abilities ? \r\n        <>\r\n            <h5>Abilities</h5>\r\n            <DexEntry>\r\n                {selectedPokemon.abilities.map(cur => <span key={cur.ability.name}>{cur.ability.name} <br /></span>)} \r\n            </DexEntry>\r\n        </> \r\n        : null;\r\n    \r\n\r\n    const dexEntryText = description \r\n        ?   <>\r\n                <h5>Dex Entry</h5>\r\n                <DexEntry>\r\n                    <p>{description[0].flavor_text}</p>\r\n                </DexEntry>\r\n            </>    \r\n        :   <div>LOADING</div>;\r\n \r\n    return(\r\n        <StyledInfo>\r\n            <Image />\r\n            <h2>{selectedPokemon.name}</h2>\r\n            <div>{ types }</div>\r\n            <br />\r\n            {abilities}\r\n            {dexEntryText}\r\n        </StyledInfo>\r\n    )\r\n})\r\n\r\nexport default PokedexInfo;","import React, { useEffect } from 'react';\r\nimport styled, { withTheme } from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n/* import GBController from '../../components/Body/GBController/GBController'; */\r\nimport GBScreen from '../../components/GBScreen/GBScreen';\r\nimport PokedexInfo from '../../components/PokedexInfo/PokedexInfo';\r\nimport Loading from '../../components/Loading/Loading';\r\n\r\nimport * as actionTypes from '../../store/actions/actionTypes';\r\n\r\nconst CurrentPokemon = React.memo((\r\n    {\r\n        theme,\r\n        selectedPokemon, \r\n        pokedexInfo,\r\n        isLoadingCurrent,\r\n        match,\r\n        fetchSelectedPokemon\r\n    }) => {\r\n    useEffect(() => { \r\n        fetchSelectedPokemon(match.params.id);\r\n    },[fetchSelectedPokemon, match])\r\n\r\n    const StyledFold = styled.div`\r\n        position: relative;\r\n        height: 800px;\r\n        width: 800px;\r\n        margin: 0 auto;\r\n        background-color: ${theme.palette.primary};\r\n        box-shadow: 5px 10px 10px ${theme.palette.black};\r\n    `\r\n    const ScreenWrapper = styled.div`\r\n        height: 600px;\r\n        width: 600px;\r\n        margin: 16px auto;\r\n        @media (max-width: 768px){\r\n            height: 400px;\r\n            width: 400px;\r\n        }\r\n    `\r\n    \r\n    const pokemon = !isLoadingCurrent ?                 \r\n    <PokedexInfo pokedexInfo={pokedexInfo} selectedPokemon={selectedPokemon} /> : <Loading />\r\n\r\n    return (\r\n    <StyledFold>\r\n        \r\n        <ScreenWrapper>\r\n            <GBScreen>\r\n               { pokemon } \r\n            </GBScreen>\r\n        </ScreenWrapper>\r\n\r\n    \r\n    </StyledFold>)\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedPokemonId: state.selectedPokemonId,\r\n    selectedPokemon: state.selectedPokemon,\r\n    pokedexInfo: state.pokedexInfo,\r\n    isLoadingCurrent: state.isLoadingCurrent\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchSelectedPokemon: (id) => dispatch({type: actionTypes.FETCH_CURRENT_PKMN_START, id: id}),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withTheme(CurrentPokemon));"],"sourceRoot":""}